{
  "master": {
    "tasks": [
      {
        "id": 3,
        "title": "Codebase Audit & Cleanup",
        "description": "Identify and remove unused or misaligned components, pages, and services; delete redundant layouts, navigation, and data hooks; ensure remaining components are functional and error-free.",
        "details": "Review the entire codebase for unused or 'cooked' components, pages, and services. Remove all that do not align with core user stories. Delete redundant layouts and navigation elements. Clean up data hooks and ensure all remaining components are functional and error-free. Use static analysis tools and manual review for thoroughness.",
        "testStrategy": "Manual review and static analysis to confirm removal of unused code. Run existing test suites to ensure no regressions in core functionality.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Refactor Data Services to Airtable",
        "description": "Consolidate all Airtable API calls into a central service; ensure all data flows through airtable.ts; remove direct API calls from components and other services; remove dev-server.js proxy.",
        "details": "Move all Airtable API calls to src/services/airtable.ts. Expose necessary functions (fetchStories, fetchStorytellers, fetchMedia, fetchThemes, fetchQuotes). Remove direct API calls from components and other services. Remove dev-server.js proxy and related logic. Frontend should call Airtable directly.",
        "testStrategy": "Unit tests for each exposed function. Integration tests to verify data flow from frontend to Airtable. Manual testing to confirm removal of proxy and direct API calls.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Standardize Page Layouts",
        "description": "Create a single, reusable Layout.tsx component for consistent navigation and structure; remove all other layout components.",
        "details": "Design and implement a reusable Layout.tsx component that provides consistent navigation and structure for all pages. Remove all other layout components (e.g., EnhancedLayout). Ensure all pages use the new layout.",
        "testStrategy": "Manual testing to confirm consistent layout across all pages. Unit tests for Layout.tsx. Regression testing to ensure no layout-related bugs.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Build Homepage",
        "description": "Implement a simple, elegant homepage providing a high-level overview and clear navigation to core content.",
        "details": "Develop a homepage that displays a high-level overview of the project's impact and offers clear navigation to core content. Use the standardized Layout.tsx. Ensure the design is simple and elegant.",
        "testStrategy": "Manual testing for layout, navigation, and content display. Unit tests for homepage components.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Build Stories Page",
        "description": "Implement a gallery or list view of all stories, with search and filter capabilities.",
        "details": "Create a page that displays all stories in a gallery or list view. Implement search and filter functionality (simple text search initially). Use data from airtable.ts.",
        "testStrategy": "Manual testing for search, filter, and display. Unit tests for data fetching and rendering. Integration tests for search/filter logic.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Build Story Detail Page",
        "description": "Implement a page to display a single story, including narrative, associated media, and storyteller.",
        "details": "Develop a page that shows a single story's narrative, associated media, and the storyteller behind it. Use data from airtable.ts. Ensure media and storyteller links are functional.",
        "testStrategy": "Manual testing for content display and navigation. Unit tests for data fetching and rendering.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Build Storytellers Page",
        "description": "Implement a gallery or list view of all storytellers, with links to their stories.",
        "details": "Create a page that displays all storytellers in a gallery or list view. Each storyteller should link to their stories. Use data from airtable.ts.",
        "testStrategy": "Manual testing for display and navigation. Unit tests for data fetching and rendering.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Build Media Page",
        "description": "Implement a masonry gallery of all media, with filter and detail view capabilities.",
        "details": "Develop a page that displays all media (images and videos) in a masonry gallery. Implement filter and detail view functionality. Use data from airtable.ts.",
        "testStrategy": "Manual testing for gallery display, filtering, and detail views. Unit tests for data fetching and rendering.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Build Themes Page",
        "description": "Implement a list or cloud of all themes, with links to related stories.",
        "details": "Create a page that displays all themes in a list or cloud view. Each theme should link to related stories. Use data from airtable.ts.",
        "testStrategy": "Manual testing for display and navigation. Unit tests for data fetching and rendering.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Build Quotes Page",
        "description": "Implement a simple page to display quotes extracted from stories.",
        "details": "Develop a page that displays quotes extracted from stories. Use data from airtable.ts. Ensure the design is simple and readable.",
        "testStrategy": "Manual testing for content display. Unit tests for data fetching and rendering.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Build GitBook-Style Documentation Hub (Wiki)",
        "description": "Implement a comprehensive documentation hub with a dynamic sidebar, markdown rendering, and search/filter functionality, accessible under the /wiki route.",
        "details": "Develop a documentation hub inspired by GitBook, featuring a dynamic sidebar for hierarchical navigation, markdown rendering for content pages, and robust search/filter capabilities by title and tags. Use a modular architecture to allow easy addition and editing of documentation pages. Sidebar navigation should reflect the structure of the documentation, updating dynamically as content changes. Integrate a markdown parser to render content, supporting code blocks, images, and tables. Implement a search bar that filters pages by title and tags in real time. Ensure the hub is fully responsive and accessible. Integrate the documentation hub into the main application under the /wiki route, ensuring seamless navigation with the rest of the app. Consider future extensibility for features like versioning or collaborative editing.",
        "testStrategy": "Perform end-to-end testing to verify navigation, markdown rendering, and search/filter functionality. Write unit tests for sidebar generation, markdown parsing, and search logic. Conduct manual accessibility and responsiveness checks. Validate integration under the /wiki route and ensure no regressions in existing navigation.",
        "status": "done",
        "dependencies": [
          4,
          5
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-21T06:03:08.434Z",
      "updated": "2025-06-21T07:36:13.915Z",
      "description": "Tasks for master context"
    }
  },
  "vision-v2": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Initial Configuration",
        "description": "Initialize the project repository with React, Chakra UI, and D3.js dependencies, and configure basic project structure.",
        "details": "Create a new React project using create-react-app or Vite. Install Chakra UI and D3.js. Set up basic folder structure for components, services, and utilities. Configure linting and formatting.",
        "testStrategy": "Verify project setup by running the development server and checking for successful installation of all dependencies.",
        "priority": "high",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 2,
        "title": "Establish Data Fetching Service",
        "description": "Implement and test the data fetching service using the existing airtable.ts service.",
        "details": "Integrate airtable.ts into the project. Ensure it can fetch stories, themes, storytellers, and media. Add error handling and logging.",
        "testStrategy": "Test fetching data from Airtable and verify data structure matches expected schema.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done"
      },
      {
        "id": 3,
        "title": "Design and Implement Core Data Model",
        "description": "Define and implement the core data model for stories, themes, storytellers, and media.",
        "details": "Create TypeScript interfaces/types for each entity. Ensure relationships (e.g., story-theme, story-storyteller) are modeled. Validate data consistency.",
        "testStrategy": "Test data model with sample data and verify relationships are correctly represented.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done"
      },
      {
        "id": 4,
        "title": "Build Theme Network Graph Visualization",
        "description": "Develop an interactive force-directed graph using D3.js to visualize relationships between themes, stories, and storytellers.",
        "details": "Use D3.js to render a force-directed graph. Implement node/edge highlighting, filtering, and navigation to related content. Ensure performance with large datasets.",
        "testStrategy": "Test graph rendering, interaction, and navigation. Validate data accuracy and responsiveness.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 5,
        "title": "Implement Story Flow Timeline Visualization",
        "description": "Create a chronological timeline visualization for stories, filterable by date, location, and project.",
        "details": "Use D3.js to render a timeline. Add filtering by date range, location, and project. Enable clicking on timeline points to reveal stories.",
        "testStrategy": "Test timeline rendering, filtering, and story display. Verify data accuracy and interaction.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 6,
        "title": "Develop Geographic Clustering Map",
        "description": "Build a map that clusters stories and media by location, with zoom and click functionality.",
        "details": "Use D3.js or a mapping library (e.g., Leaflet) to render a map. Implement clustering, zoom, and click-to-view content. Ensure performance with many points.",
        "testStrategy": "Test map rendering, clustering, zoom, and content display. Validate data accuracy and interaction.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 7,
        "title": "Design and Implement Universal Filtering System",
        "description": "Create a persistent, multi-dimensional filtering system for the entire application.",
        "details": "Build a filter component using Chakra UI. Support filtering by theme, storyteller, project, location, and date. Persist filter state across navigation.",
        "testStrategy": "Test filter application, persistence, and data consistency across views.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 8,
        "title": "Integrate Filtering with Visualizations",
        "description": "Connect the universal filtering system to all visualizations.",
        "details": "Update visualizations to respond to filter changes. Ensure data consistency and performance.",
        "testStrategy": "Test filtering on each visualization. Verify data updates and performance.",
        "priority": "high",
        "dependencies": [
          4,
          5,
          6,
          7
        ],
        "status": "done"
      },
      {
        "id": 9,
        "title": "Build Content-Based Recommendation Engine",
        "description": "Develop a recommendation engine that suggests related content based on shared attributes.",
        "details": "Implement logic to recommend stories, themes, or storytellers based on shared attributes (themes, storytellers, locations). Display recommendations on detail pages.",
        "testStrategy": "Test recommendation logic with various data combinations. Verify display and relevance.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 10,
        "title": "Implement 'You Might Also Like' Component",
        "description": "Add a component to all detail pages that displays recommended content.",
        "details": "Create a reusable component using Chakra UI. Fetch and display recommendations from the recommendation engine.",
        "testStrategy": "Test component rendering and recommendation display on all detail pages.",
        "priority": "medium",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 11,
        "title": "Design and Implement State Management Solution",
        "description": "Set up robust client-side state management for filters and visualizations.",
        "details": "Choose and implement a state management solution (e.g., Redux, Zustand, or React Context). Manage filter state and visualization data.",
        "testStrategy": "Test state persistence, updates, and synchronization across components.",
        "priority": "high",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 12,
        "title": "Implement Contextual Filter Suggestions",
        "description": "Add logic to suggest relevant filters based on the current view.",
        "details": "Analyze current data and suggest filters (e.g., popular themes, recent storytellers). Display suggestions near the filter component.",
        "testStrategy": "Test filter suggestion logic and display. Verify relevance and usability.",
        "priority": "low",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 13,
        "title": "Optimize Visualization Performance",
        "description": "Optimize rendering and interaction performance for all visualizations.",
        "details": "Profile and optimize D3.js code. Implement virtualization or lazy loading if needed. Ensure smooth user experience.",
        "testStrategy": "Test performance with large datasets. Verify smooth interaction and rendering.",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6
        ],
        "status": "done"
      },
      {
        "id": 14,
        "title": "Implement Navigation and Content Detail Pages",
        "description": "Build navigation and detail pages for stories, themes, storytellers, and media.",
        "details": "Create routes and pages for each entity. Display detailed information and related content. Ensure consistent styling with Chakra UI.",
        "testStrategy": "Test navigation, page rendering, and content display. Verify related content links.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 15,
        "title": "Prepare for Personalization (Future-Proofing)",
        "description": "Design architecture to support future personalization features.",
        "details": "Identify extension points for user preferences and interaction history. Document architecture decisions for future implementation.",
        "testStrategy": "Review architecture documentation and verify extension points are clear and accessible.",
        "priority": "low",
        "dependencies": [],
        "status": "pending"
      }
    ],
    "metadata": {
      "created": "2025-06-21T07:55:00.000Z",
      "updated": "2025-06-21T12:37:45.000Z",
      "description": "Tasks for Vision V2, generated from vision_v2_prd.md"
    }
  }
}